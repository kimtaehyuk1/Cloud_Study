- 쿠버네티스 파드에 문제가 생겼다면..
1. 파드를 실수로 지웠다면?
파드만 배포된 경우 -> 큰일낫데
디플로이먼트 형태로 배포된 파드 -> 문제생기지 않음
왜냐하면? 파드는 단일객체로 존재하지만 디플로이먼트는 파드를 감싸는 객체여서 이상태에서 문제생기면 다른 파드가 자동으로 생성된다.왜냐?
이미 디플로이먼트가 몇개 유지해야된다는 것이 있기 때문에 

쿠버네티스가 파드를 대하는 자세?는 마치 사람이 가축대하듯이 뭐 안되면 죽을수도 있지..
파드는 어딜로 옮겨지는 주체가 아니다. 존재하지만 어디로 가는경우 죽여지고 삭제되고 다시 만들어 진다.

- 이번에는 쿠버네티스 구성 요소에 문제가 생긴다면? 결론은 쿠버렛이 문제가 생기면 배포가 제대로 되지 않는다.
kubelet중단해서 실습

여기는 w1-k8s쪽에서 kubelet종료
systemctl stop kubelet
(워커노드 쪽에서 쿠버렛 종료됨)

systemctl status kubelet하면 확인가능

그후 마스터노드 쪽에서 배포해보면 IP쪽에서 none되는 현상을 볼 수 있다.

-컨테이너 런타임(다시 설명하면 복습해보면 이걸 통해서 파드가 생기는거다)이 문제가 생길때 즉 여기서 사용하는 도커

도커 서비스를 중단하기 위해서 워커노드에서 systemctl stop docker 하면 된다. 그후 마스터가서 scale조절해서 다시 배포해보면
도커를 중지해논 워커노드는 배포안함

여기서 kubelet과 컨테이너 런타임이 문제가 생겼을 때의 차이점을 생각해보면
쿠버렛이 문제가 생긴 경우와 다르게 컨테이너 런타임이 문제가 생겼을땐, 쿠버넷이 이를 인식해서 AIP서버에 알려줘서 스케쥴러가 문제가 생긴 컨테이너 런타임을
가지고 있는 워커노드에는 배포를 안하지만 kubelet이 문제가 생긴경우는 스케쥴은 하는데 kubelet이 컨테이너 런타임에게 보내줄수 없기 때문에 pending현상이 나타난다.

-마지막으로는 추가 배포를 통해 스케줄러 역할 확인
도커중지해서 w1에만 균형이 깨져있을때(왜? 그쪽으로 스케쥴 안했으니까) 그후에 다시 도커를 살리고
마스터 노드에서 scale늘려서 다시 하면 알아서 맞춰져 있다.

위에까진 워커노드에서 문제가 생긴것이고
- 이번에는 마스터노드에 문제가 생겼을때 어떻게 될까?
- 스케줄러가 삭제된다면?
삭제하기 위해서 이름을 알아야되는데 
kubectl get pods -n kube-system -o wide 하면 스케줄러 이름 알 수 있다. 근데 이거 파드보는건데?
파드인 스케줄러를 삭제한다고? 
1. 마스터노드에서 삭제해보기
kubectl delete pod kube-scheduler-m-k8s -n kube-system (이건 네임스페이스 줘야함, 거기 속해있는 거니까)
2. kubectl get pods -n kube-system 이걸로 확인해 보면
어? 존재하네?
!!쿠버네티스의 마스터노드에 존재하는 중요한 존재들은 특별하게 관리되어서 파드라 할지언정 문제가 생겨도 다시 만들어진다.

다음으로는 마스터노드에 있는 kubelet이 중단된다면?
멈출때는 마스터노드 가서 systemctl stop kubelet 그후 다시 kubectl delete pod kube-scheduler-m-k8s -n kube-system 이걸로 스케쥴러 지워본다면
위경우처럼 다시 만들어지는 것이 아니라, 프롬프트가 계속 안내려오고, kubectl get pods -n kube-system으로 보면 삭제중으로만 되있는것을 볼 수 있다.
어떻게 된거냐면! 쿠버렛으로 명령이 날아가서 삭제되든 어떻게 되든 해야되는데 그게 멈춰있기 때문에 계속 삭제중으로만 나온다.

그럼 이상태(뭔가 스케줄러가 삭제중이라는 상태)에서 워커노드에 애플리케이션은 제대로 배포할 수 있을까?
kubectl create deployment nginx --image=nginx 후 kubectl get pod로 상태를 보면 배포되있다

그럼 scale은 되나 싶어서 kubectl scale deployment nginx --replicas=3 하면 3개다 생성됨
즉 스케줄러 제대로 동작함 즉 마스터노드에 쿠버넷이 중단되어 보이기에는 스케줄러가 중단되보일수 있지만 워커 노드로 배포할땐 마스터노드의 kubelet은 영향 없기에
문제가 생기지 않는것으로 추정된다.

그다음으로 마스터노드의 컨테이너 런타임이 문제가 생기면?

(여기서 내가 헷갈렷던것이 API서버를 보고 쿠버넷이 실제 파드를 만들어야겟다 생각해서 워커노드 쪽만 가는지알앗는데 마스터쪽도 쿠버넷이있고 컨테이너 런타임도 있어서
정확히는 모르지만 이렇게 같이 관리된다는 느낌?)

마스터노드에서 systemctl stop docker 해서 마스터노드의 컨테이너 런타임을 안되게 해버리면 kubectl get pods 나 다른 네임스페이스인 kubectl get pods -n kube-sys
왜냐하면 컨테이너 런타임이 없으니 통신을 못하는 것이다. 또 내가 배포한 애플리케이션도 말짱도루묵
즉 마스터노드에 있는 컨테이너런타임이 문제가 생기면 조회가 안되는것 뿐만 아니라 통신하고 있던 얘들도 전부다 문제가 생김
마스터 노드에 있는 컨테이너 런타임 젤 중요 왜? API서버를 핸들링하는 도구니까


