쿠버네티스를 공부하는 방법은

구글에 쿠버네티스 공식 문서 라고 쳐서 이강의에서 강사가 준 랩환경과 맞춰 공부하기

-보강수업

1. 첫번쨰 질문
도커(워커노드에 있는 컨테이너 런타임)가 중단되었는데 왜 파드는 그대로일까요?
정확하게는 있는것 처럼 보이지만 동작은 할 수 가 없다. 왜냐? 컨테이너 런타임이 걔들을 관리하고 통신하는것을 하지 않기 때문에 걍 있는 것처럼 보여지고 
바로 추출되지는 않는다. 또 5분이 지나면 파드를 죽이려고 시도를 하지만 이것또한 컨테이너 런타임이 없으니까 안죽여짐 그리고 죽엿다치면 다른데 잘되는 워커노드에 넣으려고 한다.
걍 위치만 중요하지 죽이고 어쩌구 하는 것은 안중요

(공부하다가 생각이 드는것은 도커라는것(이게 아마 그림으로 봤던 컨테이너 런타임인듯)이 파드(컨테이너의 집합) 를 배출하고 관리한다.)

2. 두번째 질문
API와 ETCD 문제
배웠던거 정리하면 사용자가 API서버한테 파드 생성요청을 하면 API서버가 etcd한테 클러스터의 업데이트된 정보기록하고 etcd는 응답하는 형식이라고 배웠는데,
둘이 정말 싱크되는지 확인해봄

- 관리형 쿠버네티스인 AKS나.. 등에서는 matallb이런거 안깔아도 다 구성되있어서 k expose deployment chk-hn --type=LoadBalancer --port=80 할 수 있다.

파드는 애플리케이션 여럿 즉 컨테이너가 모여있는 집합군이라고 이야기를 했는데 이렇게 컨테이너가 파드 안에 모여져있으면 이미 '누군가가 만들어논 컨테이너를 사용하므로써
쉽고 빠르게 애플리케이션'을 배포할수 있다. 이떄 NGINX도 훌륭하지만 조금더 시각화 되어있는 polaris라는것으로 대시보드 형태로 현재있는 쿠버네티스 클러스터 정보라든지
개선할 점이라든지 정리해서 보여주는 툴 polaris.docs.fairwinds.com/dashboard에서 설치법 나와있다. 여기서 kubectl로 되있는거 복사해서 쓰기
또 특정 애플리케이션들은(컨테이너)들은 각자의 공간(namespace)를 만들고 거기서 동작하는것을 선호한다.
k get po -n polaris 이건 폴라리스 네임스페이스에 있는 파드를 보는거 또 expose는 svc에 노출시키는거 우린 여기서는 로드밸런싱으로 함
그리고 특별한 네임스페이스에 있는 파드 노출 시킬때는 k expose -n polaris deployment polaris-dashboard --type=LoadBalancer --name=polaris(걍우리가지정) --port=8080 
이렇게 해주기 그 후 k get svc -n polaris 하고 확인해보기 그후 외부 IP와 포트 따와서 구글에 IP:포트 식으로 치면 대시보드 볼 수 있다.
폴라리스 말고도 Chaos Mesh라는 툴도 있따. 이것은 어떤것을 배포를 하고 어떤것을 만든다음에 애플리케이션을 동작하도록 잘 만들어져있나? 시스템 잘 구성되있고? 복구되나? 등 문제
발생할 수 있는것을 미리 표준화시켜놓고 그것을 테스트할수 있는 환경을 제공하는거.  사이트 이름: chaos-mesh.org
여기서 또 쿠버네티스 위에서 애플리케이션을 배포하는것을 굉장히 간소화 시켜놈

네임스페이스를 지우면 그 안에있는 서비스,파드 이런거 다 사라짐
